import rospy
import gym
from gym import error, spaces
from gym.utils import seeding
from gazebo_connection import GazeboConnection
from controllers_connection import ControllersConnection
#https://bitbucket.org/theconstructcore/theconstruct_msgs/src/master/msg/RLExperimentInfo.msg
from theconstruct_msgs.msg import RLExperimentInfo

# https://github.com/openai/gym/blob/master/gym/core.py
class RobotGazeboEnv(gym.Env):
    #def __init__(self, model_path, initial_qpos, n_actions, n_substeps):
    def __init__(self, n_actions, controlers_list, robot_name_space):

        # To reset Simulations
        self.gazebo_sim = GazeboConnection()
        self.controllers_object = ControllersConnection(namespace=robot_name_space,
                                                        controlers_list=controlers_list)
        self.seed()
        self.action_space = spaces.Discrete(n_actions)
        # Visualization system
        self.viewer = None

        # Set up ROS related variables
        self.reward_pub = rospy.Publisher('/openai/reward', RLExperimentInfo, queue_size=1)

    # Env methods
    def seed(self, seed=None):
        self.np_random, seed = seeding.np_random(seed)
        return [seed]

    def step(self, action):
        """
        Function executed each time step.
        Here we get the action execute it in a time step and retrieve the
        observations generated by that action.
        :param action:
        :return: obs, reward, done, info
        """

        """
        Here we should convert the action num to movement action, execute the action in the
        simulation and get the observations result of performing that action.
        """
        rospy.loginfo("Performing STEP of RobotGazeboEnvironment")
        self.gazebo_sim.unpauseSim()
        self._set_action(action)
        self.gazebo_sim.pauseSim()
        obs = self._get_obs()
        done = self._is_done(obs)
        info = {}
        reward = self._compute_reward(obs, done)
        self._publish_reward_topic(reward)

        return obs, reward, done, info

    def reset(self):
        rospy.loginfo("Reseting RobotGazeboEnvironment")
        self._reset_sim()
        obs = self._get_obs()
        return obs

    def close(self):
        """
        Function executed when closing the environment.
        Use it for closing GUIS and other systems that need closing.
        :return:
        """
        # TODO: Here add any function needed to be closed
        rospy.loginfo("Closing RobotGazeboEnvironment")

    def render(self, mode='no_view'):
        # TODO: Implement the ScreenShot recording system, possibly through screenshots of a camera
        # TODO: Or maybe we could also record a 3D video data, OpenGL maybe?
        pass

    def _publish_reward_topic(self, reward, episode_number=1):
        """
        This function publishes the given reward in the reward topic for
        easy access from ROS infrastructure.
        :param reward:
        :param episode_number:
        :return:
        """
        reward_msg = RLExperimentInfo()
        reward_msg.episode_number = episode_number
        reward_msg.episode_reward = reward
        self.reward_pub.publish(reward_msg)

    # Extension methods
    # ----------------------------

    def _reset_sim(self):
        """Resets a simulation
        """
        self.gazebo_sim.unpauseSim()
        self.controllers_object.reset_controllers()
        self._check_all_systems_ready()
        self._set_init_pose()
        self.gazebo_sim.pauseSim()
        self.gazebo_sim.resetSim()
        self.gazebo_sim.unpauseSim()
        self.controllers_object.reset_controllers()
        self._check_all_systems_ready()
        self.gazebo_sim.pauseSim()

        return True

    def _set_init_pose(self):
        """Sets the Robot in its init pose
        """
        raise NotImplementedError()

    def _check_all_systems_ready(self):
        """
        Checks that all the sensors, publishers and other simulation systems are
        operational.
        """
        raise NotImplementedError()

    def _get_obs(self):
        """Returns the observation.
        """
        raise NotImplementedError()

    def _set_action(self, action):
        """Applies the given action to the simulation.
        """
        raise NotImplementedError()

    def _is_success(self, achieved_goal, desired_goal):
        """Indicates whether or not the achieved goal successfully achieved the desired goal.
        """
        raise NotImplementedError()

    def _is_done(self, observations):
        """Indicates whether or not the episode is done ( the robot has fallen for example).
        """
        raise NotImplementedError()

    def _compute_reward(self, observations, done):
        """Calculates the reward to give based on the observations given.
        """
        raise NotImplementedError()
